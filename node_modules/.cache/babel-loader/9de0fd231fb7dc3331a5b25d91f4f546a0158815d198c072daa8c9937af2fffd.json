{"ast":null,"code":"import axios from'axios';const API_BASE_URL=process.env.REACT_APP_API_URL||'http://192.168.1.13:8009/api';const api=axios.create({baseURL:API_BASE_URL,headers:{'Content-Type':'application/json'}});export const taskAPI={// Get all tasks\ngetTasks:async()=>{const response=await api.get('/tasks');return response.data.tasks;},// Get specific task\ngetTask:async taskId=>{const response=await api.get(\"/tasks/\".concat(taskId));return response.data.task;},// Create new task\ncreateTask:async taskData=>{const response=await api.post('/tasks',taskData);return response.data.task;},// Update task\nupdateTask:async(taskId,updates)=>{const response=await api.patch(\"/tasks/\".concat(taskId),updates);return response.data.task;},// Delete task\ndeleteTask:async taskId=>{await api.delete(\"/tasks/\".concat(taskId));}};export const chatAPI={// Send a chat message (conversational)\nsendMessage:async request=>{const response=await api.post('/chat/message',request);return response.data;},// Legacy: Create task from chat message (redirects to conversation)\ncreateTaskFromMessage:async request=>{const response=await api.post('/chat/create-task',request);return response.data;},// Get chat message history\ngetMessages:async()=>{const response=await api.get('/chat/messages');return response.data.messages;}};export const automationAPI={// Get automation status\ngetStatus:async()=>{const response=await api.get('/status');return response.data.status;},// Start automation\nstart:async()=>{const response=await api.post('/automation/start');return response.data;},// Stop automation\nstop:async()=>{const response=await api.post('/automation/stop');return response.data;}};// WebSocket connection\nexport class WebSocketService{constructor(){this.ws=null;this.listeners={};this.reconnectAttempts=0;this.maxReconnectAttempts=5;this.reconnectDelay=1000;}connect(){const wsUrl=process.env.REACT_APP_WS_URL||'ws://192.168.1.13:8009/ws';try{this.ws=new WebSocket(wsUrl);this.ws.onopen=()=>{console.log('WebSocket connected');this.reconnectAttempts=0;this.emit('connected',null);};this.ws.onmessage=event=>{try{const message=JSON.parse(event.data);this.emit(message.type,message.data);}catch(error){console.error('Failed to parse WebSocket message:',error);}};this.ws.onclose=()=>{console.log('WebSocket disconnected');this.emit('disconnected',null);this.attemptReconnect();};this.ws.onerror=error=>{console.error('WebSocket error:',error);this.emit('error',error);};}catch(error){console.error('Failed to connect to WebSocket:',error);this.attemptReconnect();}}attemptReconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;setTimeout(()=>{console.log(\"Attempting to reconnect... (\".concat(this.reconnectAttempts,\"/\").concat(this.maxReconnectAttempts,\")\"));this.connect();},this.reconnectDelay*this.reconnectAttempts);}}disconnect(){if(this.ws){this.ws.close();this.ws=null;}this.listeners={};}on(event,callback){if(!this.listeners[event]){this.listeners[event]=[];}this.listeners[event].push(callback);}off(event,callback){if(this.listeners[event]){this.listeners[event]=this.listeners[event].filter(cb=>cb!==callback);}}emit(event,data){if(this.listeners[event]){this.listeners[event].forEach(callback=>callback(data));}}send(message){if(this.ws&&this.ws.readyState===WebSocket.OPEN){this.ws.send(JSON.stringify(message));}}}export const webSocketService=new WebSocketService();","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","taskAPI","getTasks","response","get","data","tasks","getTask","taskId","concat","task","createTask","taskData","post","updateTask","updates","patch","deleteTask","delete","chatAPI","sendMessage","request","createTaskFromMessage","getMessages","messages","automationAPI","getStatus","status","start","stop","WebSocketService","constructor","ws","listeners","reconnectAttempts","maxReconnectAttempts","reconnectDelay","connect","wsUrl","REACT_APP_WS_URL","WebSocket","onopen","console","log","emit","onmessage","event","message","JSON","parse","type","error","onclose","attemptReconnect","onerror","setTimeout","disconnect","close","on","callback","push","off","filter","cb","forEach","send","readyState","OPEN","stringify","webSocketService"],"sources":["/home/john/dev/personal/bootstrap/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport { Task, TaskCreationRequest, ChatMessage, AutomationStatus } from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://192.168.1.13:8009/api';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const taskAPI = {\n  // Get all tasks\n  getTasks: async (): Promise<Task[]> => {\n    const response = await api.get('/tasks');\n    return response.data.tasks;\n  },\n\n  // Get specific task\n  getTask: async (taskId: string): Promise<Task> => {\n    const response = await api.get(`/tasks/${taskId}`);\n    return response.data.task;\n  },\n\n  // Create new task\n  createTask: async (taskData: Partial<Task>): Promise<Task> => {\n    const response = await api.post('/tasks', taskData);\n    return response.data.task;\n  },\n\n  // Update task\n  updateTask: async (taskId: string, updates: Partial<Task>): Promise<Task> => {\n    const response = await api.patch(`/tasks/${taskId}`, updates);\n    return response.data.task;\n  },\n\n  // Delete task\n  deleteTask: async (taskId: string): Promise<void> => {\n    await api.delete(`/tasks/${taskId}`);\n  },\n};\n\nexport const chatAPI = {\n  // Send a chat message (conversational)\n  sendMessage: async (request: TaskCreationRequest): Promise<{\n    message: ChatMessage;\n    conversation_continues: boolean;\n    tasks_created?: number;\n    analysis?: string;\n  }> => {\n    const response = await api.post('/chat/message', request);\n    return response.data;\n  },\n\n  // Legacy: Create task from chat message (redirects to conversation)\n  createTaskFromMessage: async (request: TaskCreationRequest): Promise<{\n    message: ChatMessage;\n    conversation_continues: boolean;\n    tasks_created?: number;\n    analysis?: string;\n  }> => {\n    const response = await api.post('/chat/create-task', request);\n    return response.data;\n  },\n\n  // Get chat message history\n  getMessages: async (): Promise<ChatMessage[]> => {\n    const response = await api.get('/chat/messages');\n    return response.data.messages;\n  },\n};\n\nexport const automationAPI = {\n  // Get automation status\n  getStatus: async (): Promise<AutomationStatus> => {\n    const response = await api.get('/status');\n    return response.data.status;\n  },\n\n  // Start automation\n  start: async (): Promise<{ message: string }> => {\n    const response = await api.post('/automation/start');\n    return response.data;\n  },\n\n  // Stop automation\n  stop: async (): Promise<{ message: string }> => {\n    const response = await api.post('/automation/stop');\n    return response.data;\n  },\n};\n\n// WebSocket connection\nexport class WebSocketService {\n  private ws: WebSocket | null = null;\n  private listeners: { [key: string]: ((data: any) => void)[] } = {};\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n\n  connect() {\n    const wsUrl = process.env.REACT_APP_WS_URL || 'ws://192.168.1.13:8009/ws';\n    \n    try {\n      this.ws = new WebSocket(wsUrl);\n\n      this.ws.onopen = () => {\n        console.log('WebSocket connected');\n        this.reconnectAttempts = 0;\n        this.emit('connected', null);\n      };\n\n      this.ws.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          this.emit(message.type, message.data);\n        } catch (error) {\n          console.error('Failed to parse WebSocket message:', error);\n        }\n      };\n\n      this.ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        this.emit('disconnected', null);\n        this.attemptReconnect();\n      };\n\n      this.ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        this.emit('error', error);\n      };\n    } catch (error) {\n      console.error('Failed to connect to WebSocket:', error);\n      this.attemptReconnect();\n    }\n  }\n\n  private attemptReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      setTimeout(() => {\n        console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.connect();\n      }, this.reconnectDelay * this.reconnectAttempts);\n    }\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n    this.listeners = {};\n  }\n\n  on(event: string, callback: (data: any) => void) {\n    if (!this.listeners[event]) {\n      this.listeners[event] = [];\n    }\n    this.listeners[event].push(callback);\n  }\n\n  off(event: string, callback: (data: any) => void) {\n    if (this.listeners[event]) {\n      this.listeners[event] = this.listeners[event].filter(cb => cb !== callback);\n    }\n  }\n\n  private emit(event: string, data: any) {\n    if (this.listeners[event]) {\n      this.listeners[event].forEach(callback => callback(data));\n    }\n  }\n\n  send(message: any) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n}\n\nexport const webSocketService = new WebSocketService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}